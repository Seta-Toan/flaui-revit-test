using System;
using FlaUI.Core;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Core.Config;
using Revit.Automation.Core.Utils;
using NUnit.Framework;
using System.IO;

namespace Revit.UiPages.Dialogs;

public class NewProjectDialog
{
    private readonly UIA3Automation _automation;

    public NewProjectDialog(UIA3Automation automation)
    {
        _automation = automation ?? throw new ArgumentNullException(nameof(automation));
    }

    /// <summary>
    /// X·ª≠ l√Ω New Project dialog v√† t·∫°o project m·ªõi
    /// </summary>
    public bool CreateNewProject(string projectName = "TestProject", string templatePath = null!)
    {
        try
        {
            TestContext.Progress.WriteLine("üîç NewProjectDialog: T√¨m New Project dialog...");

            var dialog = WaitForNewProjectDialog();
            if (dialog == null)
            {
                TestContext.Progress.WriteLine("‚ùå NewProjectDialog: Kh√¥ng t√¨m th·∫•y New Project dialog");
                return false;
            }

            TestContext.Progress.WriteLine("‚úÖ NewProjectDialog: ƒê√£ t√¨m th·∫•y New Project dialog");

            var okButton = dialog.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Button).And(cf.ByName("OK")));
            
            if (okButton != null && okButton.IsAvailable)
            {
                okButton.Click();
                TestContext.Progress.WriteLine("‚úÖ NewProjectDialog: ƒê√£ click OK button");
            }
            else
            {
                TestContext.Progress.WriteLine("‚ùå NewProjectDialog: Kh√¥ng t√¨m th·∫•y OK button");
                return false;
            }

            TestContext.Progress.WriteLine("‚è≥ NewProjectDialog: Ch·ªù project load ho√†n to√†n...");
            System.Threading.Thread.Sleep(15000);

            TestContext.Progress.WriteLine("üíæ NewProjectDialog: Focus v√†o Revit window...");
            var revitWindow = FindRevitWindow();
            if (revitWindow != null)
            {
                revitWindow.Focus();
                System.Threading.Thread.Sleep(2000);
            }

            TestContext.Progress.WriteLine("üíæ NewProjectDialog: S·ª≠ d·ª•ng SaveAsDialog ƒë·ªÉ l∆∞u project...");
            var saveAsDialog = new SaveAsDialog(_automation, revitWindow!);
            var projectSaved = saveAsDialog.SaveProject(projectName);
            
            if (!projectSaved)
            {
                TestContext.Progress.WriteLine("‚ö†Ô∏è NewProjectDialog: Kh√¥ng th·ªÉ l∆∞u project, nh∆∞ng project ƒë√£ ƒë∆∞·ª£c t·∫°o");
                return false;
            }

            TestContext.Progress.WriteLine("‚úÖ NewProjectDialog: Project m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u th√†nh c√¥ng");
            return true;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå NewProjectDialog: L·ªói khi t·∫°o project m·ªõi: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Ch·ªù New Project dialog xu·∫•t hi·ªán
    /// </summary>
    private Window? WaitForNewProjectDialog()
    {
        TestContext.Progress.WriteLine("üîç NewProjectDialog: B·∫Øt ƒë·∫ßu t√¨m dialog trong Revit...");
        
        // S·ª≠ d·ª•ng UiWaits.Until ƒë·ªÉ ch·ªù dialog xu·∫•t hi·ªán
        var dialogFound = UiWaits.Until(() =>
        {
            try
            {
                // T√¨m Revit main window tr∆∞·ªõc
                var revitWindow = _automation.GetDesktop().FindFirstChild(cf => 
                    cf.ByControlType(ControlType.Window).And(cf.ByName("Autodesk Revit 2026.2 - UNREGISTERED VERSION - [Home]")));
                
                if (revitWindow == null)
                {
                    TestContext.Progress.WriteLine("‚ö†Ô∏è NewProjectDialog: Kh√¥ng t√¨m th·∫•y Revit main window");
                    return false;
                }

                // T√¨m t·∫•t c·∫£ dialogs CH·ªà trong Revit window
                var dialogsInRevit = revitWindow.FindAllChildren(cf => 
                    cf.ByControlType(ControlType.Window));
                
                TestContext.Progress.WriteLine($"üîç NewProjectDialog: T√¨m th·∫•y {dialogsInRevit.Length} dialogs trong Revit:");
                
                foreach (var dialog in dialogsInRevit)
                {
                    if (dialog.IsAvailable)
                    {
                        TestContext.Progress.WriteLine($"  - '{dialog.Name}' (Type: {dialog.ControlType})");
                        
                        // Ki·ªÉm tra n·∫øu t√™n ch·ª©a "New Project" ho·∫∑c "New"
                        if (dialog.Name.Contains("New Project") || dialog.Name.Contains("New"))
                        {
                            TestContext.Progress.WriteLine($"‚úÖ NewProjectDialog: T√¨m th·∫•y dialog ph√π h·ª£p: '{dialog.Name}'");
                            return true;
                        }
                    }
                }
                
                return false;
            }
            catch (Exception ex)
            {
                TestContext.Progress.WriteLine($"‚ö†Ô∏è NewProjectDialog: L·ªói khi t√¨m dialog: {ex.Message}");
                return false;
            }
        }, TimeSpan.FromSeconds(15), TestConfig.PollInterval);

        // Sau khi t√¨m th·∫•y, l·∫•y Window object
        if (dialogFound)
        {
            var revitWindow = _automation.GetDesktop().FindFirstChild(cf => 
                cf.ByControlType(ControlType.Window).And(cf.ByName("Autodesk Revit 2026.2 - UNREGISTERED VERSION - [Home]")));
            
            var dialogsInRevit = revitWindow!.FindAllChildren(cf => 
                cf.ByControlType(ControlType.Window));
            
            foreach (var dialog in dialogsInRevit)
            {
                if (dialog.IsAvailable && (dialog.Name.Contains("New Project") || dialog.Name.Contains("New")))
                {
                    TestContext.Progress.WriteLine($"‚úÖ NewProjectDialog: Tr·∫£ v·ªÅ dialog: '{dialog.Name}'");
                    return dialog.AsWindow();
                }
            }
        }

        TestContext.Progress.WriteLine("‚ùå NewProjectDialog: Kh√¥ng t√¨m th·∫•y dialog ph√π h·ª£p trong Revit");
        return null;
    }

    /// <summary>
    /// Click OK button
    /// </summary>
    private bool ClickOK(Window dialog)
    {
        try
        {
            var okButton = dialog.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Button).And(cf.ByName("OK")));
            
            if (okButton != null && okButton.IsAvailable)
            {
                okButton.Click();
                TestContext.Progress.WriteLine("‚úÖ NewProjectDialog: ƒê√£ click OK button");
                return true;
            }

            TestContext.Progress.WriteLine("‚ùå NewProjectDialog: Kh√¥ng t√¨m th·∫•y OK button");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå NewProjectDialog: L·ªói khi click OK: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// T√¨m Revit window hi·ªán t·∫°i
    /// </summary>
    private Window? FindRevitWindow()
    {
        try
        {
            var allWindows = _automation.GetDesktop().FindAllChildren(cf => 
                cf.ByControlType(ControlType.Window));
            
            foreach (var window in allWindows)
            {
                if (window.IsAvailable && window.Name.Contains("Autodesk Revit 2026.2 - UNREGISTERED VERSION"))
                {
                    return window.AsWindow();
                }
            }
            
            return null;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è NewProjectDialog: L·ªói khi t√¨m Revit window: {ex.Message}");
            return null;
        }
    }
}
