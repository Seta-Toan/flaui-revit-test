using System;
using System.Linq;
using FlaUI.Core;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Core.Config;
using Revit.Automation.Core.Utils;
using NUnit.Framework;

namespace Revit.UiPages.Dialogs;

public class TrialDialog
{
    private readonly Application _app;
    private readonly UIA3Automation _uia;

    public TrialDialog(Application app, UIA3Automation uia)
    {
        _app = app ?? throw new ArgumentNullException(nameof(app));
        _uia = uia ?? throw new ArgumentNullException(nameof(uia));
    }

    public DialogResult CloseIfPresent()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç TrialDialog: T√¨m trial dialog...");
            var startTime = DateTime.Now;
            
            var trialDialog = FindTrialDialog();
            
            if (trialDialog == null)
            {
                TestContext.Progress.WriteLine("‚úÖ TrialDialog: Kh√¥ng t√¨m th·∫•y trial dialog");
                return DialogResult.NotFound;
            }

            TestContext.Progress.WriteLine($"‚úÖ TrialDialog: T√¨m th·∫•y trial dialog: '{trialDialog.Name}'");
            
            var result = HandleTrialDialog(trialDialog);
            
            if (result == DialogResult.Closed)
            {
                TestContext.Progress.WriteLine("‚è≥ TrialDialog: Ki·ªÉm tra dialog c√≥ ƒë√≥ng...");
                var closed = UiWaits.Until(() => !trialDialog.IsAvailable, TimeSpan.FromSeconds(3), TestConfig.PollInterval);
                if (closed)
                {
                    TestContext.Progress.WriteLine("‚úÖ TrialDialog: Trial dialog ƒë√£ ƒë√≥ng th√†nh c√¥ng");
                }
                else
                {
                    TestContext.Progress.WriteLine("‚ö†Ô∏è TrialDialog: Dialog v·∫´n c√≤n nh∆∞ng c√≥ th·ªÉ ƒëang ƒë√≥ng, ti·∫øp t·ª•c...");
                }
            }

            var totalTime = DateTime.Now - startTime;
            TestContext.Progress.WriteLine($"‚è±Ô∏è TrialDialog: Th·ªùi gian x·ª≠ l√Ω trial dialog: {totalTime.TotalSeconds:F1}s");
            
            return result;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå TrialDialog: L·ªói khi x·ª≠ l√Ω trial dialog: {ex.Message}");
            return DialogResult.Failed;
        }
    }

    private AutomationElement? FindTrialDialog()
    {
        var desktop = _uia.GetDesktop();
        
        // Method 1: T√¨m theo AutomationId (nhanh nh·∫•t v√† ch√≠nh x√°c nh·∫•t)
        try
        {
            Console.WriteLine("üîç T√¨m theo AutomationId 'QApplication.WebView2BrowserDlg'...");
            var dialog = desktop.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Window).And(cf.ByAutomationId("QApplication.WebView2BrowserDlg")));
            if (dialog != null) 
            {
                Console.WriteLine("‚úÖ T√¨m th·∫•y trial dialog theo AutomationId");
                return dialog;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m theo AutomationId: {ex.Message}");
        }
        
        // Method 2: T√¨m theo t√™n ch√≠nh x√°c
        try
        {
            Console.WriteLine("üîç T√¨m theo t√™n 'WebView2 WebBrowser'...");
            var dialog = desktop.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Window).And(cf.ByName("WebView2 WebBrowser")));
            if (dialog != null) 
            {
                Console.WriteLine("‚úÖ T√¨m th·∫•y trial dialog theo t√™n");
                return dialog;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m theo t√™n: {ex.Message}");
        }

        return null;
    }

    private DialogResult HandleTrialDialog(AutomationElement dialog)
    {
        try
        {
            // CH·ªú WEBVIEW2 RENDER - WebView2 c·∫ßn th·ªùi gian load HTML/CSS
            TestContext.Progress.WriteLine("‚è≥ Ch·ªù 5 gi√¢y ƒë·ªÉ WebView2 trial dialog render ho√†n to√†n...");
            System.Threading.Thread.Sleep(5000); 
            TestContext.Progress.WriteLine("‚úÖ Ho√†n t·∫•t ch·ªù WebView2 render");
            
            // Th·ª≠ t√¨m button v·ªõi retry logic
            Button? closeButton = null;
            int attempts = 0;
            int maxAttempts = 3;            
            while (closeButton == null && attempts < maxAttempts)
            {
                attempts++;
                TestContext.Progress.WriteLine($"üîÑ L·∫ßn th·ª≠ {attempts}/{maxAttempts} t√¨m close button...");
                
                closeButton = FindCloseButtonInDialog(dialog);
                
                if (closeButton == null && attempts < maxAttempts)
                {
                    TestContext.Progress.WriteLine("‚è≥ Ch·ªù th√™m 5 gi√¢y ƒë·ªÉ WebView2 load...");
                    System.Threading.Thread.Sleep(5000);
                }
            }
            
            if (closeButton != null)
            {
                TestContext.Progress.WriteLine($"üñ±Ô∏è === TH·ª∞C HI·ªÜN CLICK BUTTON ===");
                TestContext.Progress.WriteLine($"üñ±Ô∏è Click button: '{closeButton.Name}' (Class: '{closeButton.ClassName}')");
                closeButton.Invoke();
                TestContext.Progress.WriteLine($"‚úÖ Click ho√†n t·∫•t!");
                return DialogResult.Closed;
            }
            return DialogResult.Closed;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω trial dialog: {ex.Message}");
            return DialogResult.Failed;
        }
    }

    private Button? FindCloseButtonInDialog(AutomationElement dialog)
    {
        // T√¨m ƒê√öNG trial dialog close button (Hyperlink v·ªõi class 'btn-close no-outline')
        try
        {
            TestContext.Progress.WriteLine("üîç T√¨m TRIAL DIALOG close button (Hyperlink class 'btn-close no-outline')...");
            var closeButton = dialog.FindFirstDescendant(cf =>
                cf.ByControlType(ControlType.Hyperlink).And(cf.ByClassName("btn-close no-outline")))?.AsButton();
            if (closeButton != null) 
            {
                TestContext.Progress.WriteLine("‚úÖ T√¨m th·∫•y TRIAL DIALOG close button (element [19])");
                return closeButton;
            }
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m trial dialog close button: {ex.Message}");
        }
        return null;
    }
}

