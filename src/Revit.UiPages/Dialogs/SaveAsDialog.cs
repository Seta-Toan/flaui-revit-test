using System;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Core.Config;
using Revit.Automation.Core.Utils;
using NUnit.Framework;

namespace Revit.UiPages.Dialogs;

/// <summary>
/// X·ª≠ l√Ω Save As dialog c·ªßa Revit
/// </summary>
public class SaveAsDialog
{
    private readonly UIA3Automation _automation;
    private readonly Window _revitWindow;

    public SaveAsDialog(UIA3Automation automation, Window revitWindow)
    {
        _automation = automation ?? throw new ArgumentNullException(nameof(automation));
        _revitWindow = revitWindow ?? throw new ArgumentNullException(nameof(revitWindow));
    }

    /// <summary>
    /// X·ª≠ l√Ω Save As dialog ƒë·ªÉ l∆∞u project
    /// </summary>
    public bool SaveProject(string projectName = "TestProject")
    {
        try
        {
            TestContext.Progress.WriteLine("üíæ SaveAsDialog: B·∫Øt ƒë·∫ßu l∆∞u project");

            System.Threading.Thread.Sleep(5000);
            var saveAsTriggered = TriggerSaveAs();
            if (!saveAsTriggered)
            {
                TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng th·ªÉ m·ªü Save As dialog");
                return false;
            }

            var saveDialog = WaitForSaveAsDialog();
            if (saveDialog == null)
            {
                TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Save As dialog kh√¥ng xu·∫•t hi·ªán");
                return false;
            }

            TestContext.Progress.WriteLine("‚úÖ SaveAsDialog: ƒê√£ t√¨m th·∫•y Save As dialog");

            var folderCreated = CreateNewFolder(saveDialog);
            if (!folderCreated)
            {
                TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng th·ªÉ t·∫°o folder m·ªõi");
                return false;
            }

            var fileNameSet = SetFileName(saveDialog, projectName);
            if (!fileNameSet)
            {
                TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng th·ªÉ nh·∫≠p t√™n file");
                return false;
            }

            var saveClicked = ClickSave(saveDialog);
            if (!saveClicked)
            {
                TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng th·ªÉ click Save");
                return false;
            }

            TestContext.Progress.WriteLine("‚úÖ SaveAsDialog: Project ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng");
            return true;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi x·ª≠ l√Ω Save As dialog: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Ch·ªù Save As dialog xu·∫•t hi·ªán
    /// </summary>
    private Window? WaitForSaveAsDialog()
    {
        TestContext.Progress.WriteLine("üîç SaveAsDialog: B·∫Øt ƒë·∫ßu t√¨m Save As dialog trong Revit...");
        
        return UiWaits.Until(() =>
        {
            try
            {
                // T√¨m Save As dialog CH·ªà trong Revit window
                var dialogsInRevit = _revitWindow.FindAllChildren(cf => 
                    cf.ByControlType(ControlType.Window));
                
                TestContext.Progress.WriteLine($"üîç SaveAsDialog: T√¨m th·∫•y {dialogsInRevit.Length} dialogs trong Revit:");
                
                foreach (var dialog in dialogsInRevit)
                {
                    if (dialog.IsAvailable)
                    {
                        TestContext.Progress.WriteLine($"  - '{dialog.Name}' (Type: {dialog.ControlType})");
                        
                        // Ki·ªÉm tra n·∫øu t√™n ch·ª©a "Save As"
                        if (dialog.Name.Contains("Save As") || dialog.Name.Contains("Save"))
                        {
                            TestContext.Progress.WriteLine($"‚úÖ SaveAsDialog: T√¨m th·∫•y Save As dialog: '{dialog.Name}'");
                            return true;
                        }
                    }
                }
                
                return false;
            }
            catch (Exception ex)
            {
                TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi t√¨m Save As dialog: {ex.Message}");
                return false;
            }
        }, TimeSpan.FromSeconds(15), TestConfig.PollInterval) ? 
        GetSaveAsDialog() : null;
    }

    /// <summary>
    /// L·∫•y Save As dialog window
    /// </summary>
    private Window? GetSaveAsDialog()
    {
        try
        {
            // T√¨m Save As dialog trong Revit window
            var dialogsInRevit = _revitWindow.FindAllChildren(cf => 
                cf.ByControlType(ControlType.Window));
            
            foreach (var dialog in dialogsInRevit)
            {
                if (dialog.IsAvailable && (dialog.Name.Contains("Save As") || dialog.Name.Contains("Save")))
                {
                    TestContext.Progress.WriteLine($"‚úÖ SaveAsDialog: Tr·∫£ v·ªÅ Save As dialog: '{dialog.Name}'");
                    return dialog.AsWindow();
                }
            }
            
            return null;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi l·∫•y Save As dialog: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// T·∫°o folder m·ªõi
    /// </summary>
    private bool CreateNewFolder(Window saveDialog)
    {
        try
        {
            TestContext.Progress.WriteLine("üìÅ SaveAsDialog: T·∫°o folder m·ªõi trong th∆∞ m·ª•c hi·ªán t·∫°i...");
            
            // T√¨m button "Create New Folder"
            var createFolderButton = saveDialog.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Button).And(cf.ByName("Create New Folder (Alt+5)")));
            
            if (createFolderButton != null && createFolderButton.IsAvailable)
            {
                createFolderButton.Click();
                System.Threading.Thread.Sleep(1000);
                
                // Nh·∫≠p t√™n folder m·ªõi
                System.Windows.Forms.SendKeys.SendWait("RevitTestData");
                System.Windows.Forms.SendKeys.SendWait("{ENTER}");
                System.Threading.Thread.Sleep(1000);
                
                TestContext.Progress.WriteLine("‚úÖ SaveAsDialog: ƒê√£ t·∫°o folder 'RevitTestData'");
                return true;
            }
            
            TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng t√¨m th·∫•y button 'Create New Folder'");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi t·∫°o folder: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Set t√™n file
    /// </summary>
    private bool SetFileName(Window saveDialog, string fileName)
    {
        try
        {
            TestContext.Progress.WriteLine("üìù SaveAsDialog: T√¨m textbox ƒë·ªÉ nh·∫≠p t√™n file...");
            
            // T√¨m textbox "File name" - c√≥ th·ªÉ c√≥ nhi·ªÅu c√°ch
            var fileNameBox = saveDialog.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Edit).And(cf.ByName("File name:"))) ??
                saveDialog.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Edit).And(cf.ByName("File name"))) ??
                saveDialog.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Edit));
            
            if (fileNameBox != null && fileNameBox.IsAvailable)
            {
                TestContext.Progress.WriteLine($"‚úÖ SaveAsDialog: T√¨m th·∫•y textbox: '{fileNameBox.Name}'");
                
                fileNameBox.Focus();
                System.Threading.Thread.Sleep(500);
                
                // X√≥a text hi·ªán t·∫°i v√† nh·∫≠p t√™n m·ªõi
                System.Windows.Forms.SendKeys.SendWait("^a"); // Select all
                System.Threading.Thread.Sleep(200);
                System.Windows.Forms.SendKeys.SendWait(fileName);
                System.Threading.Thread.Sleep(500);
                
                TestContext.Progress.WriteLine($"‚úÖ SaveAsDialog: ƒê√£ nh·∫≠p t√™n file: {fileName}");
                return true;
            }
            
            TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng t√¨m th·∫•y textbox ƒë·ªÉ nh·∫≠p t√™n file");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi set t√™n file: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Click Save button
    /// </summary>
    private bool ClickSave(Window saveDialog)
    {
        try
        {
            TestContext.Progress.WriteLine("üíæ SaveAsDialog: T√¨m button Save...");
            
            // T√¨m button Save - c√≥ th·ªÉ c√≥ nhi·ªÅu c√°ch
            var saveButton = saveDialog.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Button).And(cf.ByName("Save"))) ??
                saveDialog.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Button).And(cf.ByName("&Save"))) ??
                saveDialog.FindFirstDescendant(cf => 
                    cf.ByControlType(ControlType.Button).And(cf.ByAutomationId("1")));
            
            if (saveButton != null && saveButton.IsAvailable)
            {
                TestContext.Progress.WriteLine($"‚úÖ SaveAsDialog: T√¨m th·∫•y button Save: '{saveButton.Name}'");
                
                saveButton.Click();
                System.Threading.Thread.Sleep(1000); // Ch·ªù x·ª≠ l√Ω
                
                TestContext.Progress.WriteLine("‚úÖ SaveAsDialog: ƒê√£ click Save button");
                return true;
            }
            
            TestContext.Progress.WriteLine("‚ùå SaveAsDialog: Kh√¥ng t√¨m th·∫•y button Save");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi click Save: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// K√≠ch ho·∫°t Save As dialog
    /// </summary>
    private bool TriggerSaveAs()
    {
        try
        {
            TestContext.Progress.WriteLine("üíæ SaveAsDialog: S·ª≠ d·ª•ng Ctrl+S ƒë·ªÉ m·ªü Save As...");
            
            System.Windows.Forms.SendKeys.SendWait("^s");
            System.Threading.Thread.Sleep(1000);
            
            TestContext.Progress.WriteLine("‚úÖ SaveAsDialog: ƒê√£ g·ª≠i Ctrl+S");
            return true;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è SaveAsDialog: L·ªói khi k√≠ch ho·∫°t Save As: {ex.Message}");
            return false;
        }
    }
}
