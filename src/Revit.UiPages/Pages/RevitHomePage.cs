using System;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Core.Config;
using Revit.Automation.Core.Utils;
using NUnit.Framework;

namespace Revit.UiPages.Pages;

public class RevitHomePage
{
    private readonly Window _mainWindow;
    private readonly UIA3Automation _automation;

    public RevitHomePage(Window mainWindow, UIA3Automation automation)
    {
        _mainWindow = mainWindow ?? throw new ArgumentNullException(nameof(mainWindow));
        _automation = automation ?? throw new ArgumentNullException(nameof(automation));
    }

    public bool IsLoaded()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: Ki·ªÉm tra trang home c√≥ load xong...");
            
            var isRecentVisible = UiWaits.Until(() =>
            {
                var recentText = _mainWindow.FindFirstDescendant(cf => cf.ByName("Recent"));
                return recentText != null && recentText.IsAvailable;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (isRecentVisible)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Trang home ƒë√£ load xong");
                return true;
            }

            TestContext.Progress.WriteLine("‚ö†Ô∏è RevitHomePage: Trang home ch∆∞a load xong");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi ki·ªÉm tra trang home: {ex.Message}");
            return false;
        }
    }

    public bool ClickNewProject()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: T√¨m v√† click 'New ...' button...");

            var newButtonFound = UiWaits.Until(() =>
            {
                foreach (var buttonName in TestConfig.UiAliases.NewButtonNames)
                {
                    var newButton = _mainWindow.FindFirstDescendant(cf =>
                        cf.ByControlType(ControlType.Button).And(cf.ByName(buttonName)));
                    
                    if (newButton != null && newButton.IsAvailable)
                    {
                        TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: T√¨m th·∫•y 'New ...' button: '{buttonName}'");
                        newButton.Click();
                        return true;
                    }
                }
                return false;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (newButtonFound)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ click 'New ...' button");
                return true;
            }

            TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng t√¨m th·∫•y 'New ...' button");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi click New: {ex.Message}");
            return false;
        }
    }
    public bool UseKeyboardShortcut()
    {
        try
        {
            TestContext.Progress.WriteLine("‚å®Ô∏è RevitHomePage: S·ª≠ d·ª•ng t·ªï h·ª£p ph√≠m Ctrl+D...");
            
            // Focus v√†o main window tr∆∞·ªõc
            _mainWindow.Focus();
            System.Threading.Thread.Sleep(500); // Ch·ªù focus
            
            // G·ª≠i t·ªï h·ª£p ph√≠m Ctrl+D
            System.Windows.Forms.SendKeys.SendWait("^d");
            System.Threading.Thread.Sleep(1000); // Ch·ªù x·ª≠ l√Ω
            
            TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ g·ª≠i t·ªï h·ª£p ph√≠m Ctrl+D");
            return true;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi s·ª≠ d·ª•ng t·ªï h·ª£p ph√≠m: {ex.Message}");
            return false;
        }
    }

    public bool ReturnToProjectSelection()
    {
        try
        {
            TestContext.Progress.WriteLine("üîÑ RevitHomePage: S·ª≠ d·ª•ng Ctrl+D ƒë·ªÉ v·ªÅ trang project selection...");
            
            // S·ª≠ d·ª•ng Ctrl+D
            var success = UseKeyboardShortcut();
            
            if (success)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Ctrl+D ƒë√£ ƒë∆∞·ª£c th·ª±c thi th√†nh c√¥ng");
                
                // Ch·ªù v√† ki·ªÉm tra xem ƒë√£ v·ªÅ trang project selection ch∆∞a
                TestContext.Progress.WriteLine("‚è≥ RevitHomePage: Ch·ªù chuy·ªÉn v·ªÅ trang project selection...");
                var returnedToProjectSelection = UiWaits.Until(() =>
                {
                    try
                    {
                        return IsProjectSelectionVisible();
                    }
                    catch
                    {
                        return false;
                    }
                }, TimeSpan.FromSeconds(15), TestConfig.PollInterval);

                if (returnedToProjectSelection)
                {
                    TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ chuy·ªÉn v·ªÅ trang project selection th√†nh c√¥ng");
                    return true;
                }
                else
                {
                    TestContext.Progress.WriteLine("‚ö†Ô∏è RevitHomePage: Ctrl+D ƒë√£ th·ª±c thi nh∆∞ng ch∆∞a v·ªÅ trang project selection");
                    return false;
                }
            }
            
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi s·ª≠ d·ª•ng Ctrl+D: {ex.Message}");
            return false;
        }
    }
    private bool IsProjectSelectionVisible()
    {
        try
        {
            // T√¨m text "Recent" ƒë·ªÉ x√°c nh·∫≠n ƒëang ·ªü home page
            var recentText = _mainWindow.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Text).And(cf.ByName("Recent")));
            
            if (recentText != null && recentText.IsAvailable)
            {
                return true;
            }
            
            // Backup: t√¨m "Revit 2026" text
            var revitText = _mainWindow.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Text).And(cf.ByName("Revit 2026")));
                
            if (revitText != null && revitText.IsAvailable)
            {
                return true;
            }
            
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è L·ªói khi ki·ªÉm tra project selection: {ex.Message}");
            return false;
        }
    }


    /// <summary>
    /// T·∫°o project m·ªõi th√¥ng qua New Project dialog
    /// </summary>
    public bool CreateNewProject(string projectName = "TestProject", string templatePath = null!)
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: B·∫Øt ƒë·∫ßu t·∫°o project m·ªõi...");

            var newButtonClicked = ClickNewProject();
            if (!newButtonClicked)
            {
                TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng th·ªÉ click New Project button");
                return false;
            }

            var newProjectDialog = new Revit.UiPages.Dialogs.NewProjectDialog(_automation);
            var projectCreated = newProjectDialog.CreateNewProject(projectName, templatePath);
            
            if (!projectCreated)
            {
                TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng th·ªÉ t·∫°o project m·ªõi");
                return false;
            }

            // 3. Ch·ªù r·ªùi kh·ªèi trang Home - S·ª¨A LOGIC N√ÄY
            TestContext.Progress.WriteLine("‚è≥ RevitHomePage: Ch·ªù r·ªùi kh·ªèi trang Home...");
            
            // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ project load
            System.Threading.Thread.Sleep(5000);
            
            // Ki·ªÉm tra ƒë∆°n gi·∫£n: n·∫øu kh√¥ng c√≤n ·ªü home th√¨ OK
            var isStillHome = IsLoaded();
            if (!isStillHome)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ r·ªùi kh·ªèi trang Home, project m·ªõi ƒëang ƒë∆∞·ª£c t·∫°o");
                return true;
            }
            else
            {
                TestContext.Progress.WriteLine("‚ö†Ô∏è RevitHomePage: V·∫´n c√≤n ·ªü trang Home sau khi t·∫°o project");
                return false;
            }
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi t·∫°o project m·ªõi: {ex.Message}");
            return false;
        }
    }
}
