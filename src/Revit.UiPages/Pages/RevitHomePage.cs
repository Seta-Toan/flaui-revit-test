using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using FlaUI.Core;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Core.Config;
using Revit.Automation.Core.Utils;
using NUnit.Framework;

namespace Revit.UiPages.Pages;

public class RevitHomePage
{
    private readonly Window _mainWindow;
    private readonly UIA3Automation _automation;

    public RevitHomePage(Window mainWindow, UIA3Automation automation)
    {
        _mainWindow = mainWindow ?? throw new ArgumentNullException(nameof(mainWindow));
        _automation = automation ?? throw new ArgumentNullException(nameof(automation));
    }

    public bool IsLoaded()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: Ki·ªÉm tra trang home c√≥ load xong...");
            
            var isRecentVisible = UiWaits.Until(() =>
            {
                var recentText = _mainWindow.FindFirstDescendant(cf => cf.ByName("Recent"));
                return recentText != null && recentText.IsAvailable;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (isRecentVisible)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Trang home ƒë√£ load xong");
                return true;
            }

            TestContext.Progress.WriteLine("‚ö†Ô∏è RevitHomePage: Trang home ch∆∞a load xong");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi ki·ªÉm tra trang home: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// M·ªü project ƒë·∫ßu ti√™n c√≥ s·∫µn (kh√¥ng c·∫ßn ch·ªâ ƒë·ªãnh t√™n c·ª• th·ªÉ)
    /// </summary>
    public bool OpenFirstAvailableProject()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: T√¨m project ƒë·∫ßu ti√™n c√≥ s·∫µn...");

            // T√¨m t·∫•t c·∫£ project cards
            var projectFound = UiWaits.Until(() =>
            {
                var allElements = _mainWindow.FindAllDescendants();
                var availableProjects = new List<AutomationElement>();

                foreach (var element in allElements)
                {
                    try
                    {
                        if (element.IsAvailable)
                        {
                            var name = element.Name ?? "";
                            var controlType = element.ControlType;
                            if (IsValidProjectCard(name, controlType))
                            {
                                availableProjects.Add(element);
                                TestContext.Progress.WriteLine($"üîç RevitHomePage: T√¨m th·∫•y project candidate: '{name}' (Type: {controlType})");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        TestContext.Progress.WriteLine($"‚ö†Ô∏è RevitHomePage: L·ªói khi x·ª≠ l√Ω element: {ex.Message}");
                    }
                }

                TestContext.Progress.WriteLine($"üìä RevitHomePage: T√¨m th·∫•y {availableProjects.Count} project candidates");

                if (availableProjects.Count > 0)
                {
                    // Ch·ªçn project ƒë·∫ßu ti√™n
                    var firstProject = availableProjects[0];
                    var projectName = firstProject.Name ?? "Unknown Project";
                    
                    TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: Ch·ªçn project ƒë·∫ßu ti√™n: '{projectName}'");
                    
                    try
                    {
                        firstProject.Click();
                        TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: ƒê√£ click tr·ª±c ti·∫øp v√†o project '{projectName}'");
                        return true;
                    }
                    catch (Exception directClickEx)
                    {
                        TestContext.Progress.WriteLine($"‚ö†Ô∏è RevitHomePage: L·ªói khi click tr·ª±c ti·∫øp: {directClickEx.Message}");
                    }
                }

                return false;
            }, TimeSpan.FromSeconds(15), TestConfig.PollInterval);

            if (projectFound)
            {
                // Ch·ªù trang project load
                TestContext.Progress.WriteLine("‚è≥ RevitHomePage: Ch·ªù 50 gi√¢y ƒë·ªÉ trang project load...");
                System.Threading.Thread.Sleep(50000); 
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Ho√†n t·∫•t ch·ªù project load");
                
                return true;
            }

            TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng t√¨m th·∫•y project n√†o c√≥ s·∫µn");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi m·ªü project: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// Ki·ªÉm tra xem element c√≥ ph·∫£i l√† project card h·ª£p l·ªá kh√¥ng
    /// </summary>
    private bool IsValidProjectCard(string name, ControlType controlType)
    {
        // Lo·∫°i b·ªè c√°c element kh√¥ng ph·∫£i project
        if (string.IsNullOrEmpty(name) || 
            name.Contains("Autodesk") || 
            name.Contains("Cloud") ||
            name.Contains("Recent") ||
            name.Contains("Sort by") ||
            name.Contains("Search"))
        {
            return false;
        }

        // Ch·ªâ ch·∫•p nh·∫≠n c√°c control type ph√π h·ª£p v·ªõi project cards
        if (controlType != ControlType.Group && 
            controlType != ControlType.Custom && 
            controlType != ControlType.Pane &&
            controlType != ControlType.ListItem)
        {
            return false;
        }

        // Ki·ªÉm tra t√™n c√≥ ch·ª©a t·ª´ kh√≥a project kh√¥ng
        var lowerName = name.ToLower();
        return lowerName.Contains("sample") || 
               lowerName.Contains("project") || 
               lowerName.Contains("template") ||
               lowerName.Contains("architectural") ||
               lowerName.Contains("structural") ||
               lowerName.Contains("hvac") ||
               lowerName.Contains("plumbing") ||
               lowerName.Contains("electrical") ||
               lowerName.Contains("family");
    }

    // /// <summary>
    // /// M·ªü project theo t√™n c·ª• th·ªÉ (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c)
    // /// </summary>
    // public bool OpenExistingProject(string projectName)
    // {
    //     try
    //     {
    //         TestContext.Progress.WriteLine($"üîç RevitHomePage: T√¨m v√† m·ªü project '{projectName}'...");

    //         // T√¨m project card theo t√™n
    //         var projectFound = UiWaits.Until(() =>
    //         {
    //             var allElements = _mainWindow.FindAllDescendants();
    //             foreach (var element in allElements)
    //             {
    //                 try
    //                 {
    //                     var name = element.Name ?? "";
    //                     if (name.Contains(projectName) && element.IsAvailable)
    //                     {
    //                         TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: T√¨m th·∫•y project '{name}'");
    //                         element.AsButton()?.Click();
    //                         return true;
    //                     }
    //                 }
    //                 catch { }
    //             }
    //             return false;
    //         }, TimeSpan.FromSeconds(15), TestConfig.PollInterval);

    //         if (projectFound)
    //         {
    //             TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: ƒê√£ click v√†o project '{projectName}'");
                
    //             // Ch·ªù trang project load
    //             TestContext.Progress.WriteLine("‚è≥ RevitHomePage: Ch·ªù 50 gi√¢y ƒë·ªÉ trang project load...");
    //             System.Threading.Thread.Sleep(50000); 
    //             TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Ho√†n t·∫•t ch·ªù project load");
                
    //             return true;
    //         }

    //         TestContext.Progress.WriteLine($"‚ùå RevitHomePage: Kh√¥ng t√¨m th·∫•y project '{projectName}'");
    //         return false;
    //     }
    //     catch (Exception ex)
    //     {
    //         TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi m·ªü project: {ex.Message}");
    //         return false;
    //     }
    // }

    public bool ClickNewProject()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: T√¨m v√† click 'New ...' button...");

            // T√¨m button "New ..." trong Models section
            var newButtonFound = UiWaits.Until(() =>
            {
                var newButton = _mainWindow.FindFirstDescendant(cf =>
                    cf.ByControlType(ControlType.Button).And(cf.ByName("New ...")));
                
                if (newButton != null && newButton.IsAvailable)
                {
                    TestContext.Progress.WriteLine("‚úÖ RevitHomePage: T√¨m th·∫•y 'New ...' button");
                    newButton.Click();
                    return true;
                }
                return false;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (newButtonFound)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ click 'New ...' button");
                return true;
            }

            //  Fallback - t√¨m theo text content
            TestContext.Progress.WriteLine("üîç RevitHomePage: Fallback - t√¨m theo text 'New'...");
            var textNewFound = UiWaits.Until(() =>
            {
                var allElements = _mainWindow.FindAllDescendants();
                foreach (var element in allElements)
                {
                    try
                    {
                        var name = element.Name ?? "";
                        if ((name == "New ..." || name.Contains("New")) && element.IsAvailable)
                        {
                            TestContext.Progress.WriteLine($"‚úÖ RevitHomePage: T√¨m th·∫•y New element: '{name}'");
                            element.AsButton()?.Click();
                            return true;
                        }
                    }
                    catch { }
                }
                return false;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (textNewFound)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ click New button (fallback)");
                return true;
            }

            TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng t√¨m th·∫•y 'New ...' button");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi click New: {ex.Message}");
            return false;
        }
    }

    public bool ClickOpenProject()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: T√¨m v√† click 'Open ...' button...");

            var openButtonFound = UiWaits.Until(() =>
            {
                var openButton = _mainWindow.FindFirstDescendant(cf =>
                    cf.ByControlType(ControlType.Button).And(cf.ByName("Open ...")));
                
                if (openButton != null && openButton.IsAvailable)
                {
                    TestContext.Progress.WriteLine("‚úÖ RevitHomePage: T√¨m th·∫•y 'Open ...' button");
                    openButton.Click();
                    return true;
                }
                return false;
            }, TimeSpan.FromSeconds(10), TestConfig.PollInterval);

            if (openButtonFound)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ click 'Open ...' button");
                return true;
            }

            TestContext.Progress.WriteLine("‚ùå RevitHomePage: Kh√¥ng t√¨m th·∫•y 'Open ...' button");
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi click Open: {ex.Message}");
            return false;
        }
    }

    public bool UseKeyboardShortcut()
    {
        try
        {
            TestContext.Progress.WriteLine("‚å®Ô∏è RevitHomePage: S·ª≠ d·ª•ng t·ªï h·ª£p ph√≠m Ctrl+D...");
            
            // Focus v√†o main window tr∆∞·ªõc
            _mainWindow.Focus();
            System.Threading.Thread.Sleep(500); // Ch·ªù focus
            
            // G·ª≠i t·ªï h·ª£p ph√≠m Ctrl+D
            System.Windows.Forms.SendKeys.SendWait("^d");
            System.Threading.Thread.Sleep(1000); // Ch·ªù x·ª≠ l√Ω
            
            TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ g·ª≠i t·ªï h·ª£p ph√≠m Ctrl+D");
            return true;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi s·ª≠ d·ª•ng t·ªï h·ª£p ph√≠m: {ex.Message}");
            return false;
        }
    }

    public bool ReturnToProjectSelection()
    {
        try
        {
            TestContext.Progress.WriteLine("üîÑ RevitHomePage: S·ª≠ d·ª•ng Ctrl+D ƒë·ªÉ v·ªÅ trang project selection...");
            
            // S·ª≠ d·ª•ng Ctrl+D
            var success = UseKeyboardShortcut();
            
            if (success)
            {
                TestContext.Progress.WriteLine("‚úÖ RevitHomePage: Ctrl+D ƒë√£ ƒë∆∞·ª£c th·ª±c thi th√†nh c√¥ng");
                
                // Ch·ªù v√† ki·ªÉm tra xem ƒë√£ v·ªÅ trang project selection ch∆∞a
                TestContext.Progress.WriteLine("‚è≥ RevitHomePage: Ch·ªù chuy·ªÉn v·ªÅ trang project selection...");
                var returnedToProjectSelection = UiWaits.Until(() =>
                {
                    try
                    {
                        return IsProjectSelectionVisible();
                    }
                    catch
                    {
                        return false;
                    }
                }, TimeSpan.FromSeconds(15), TestConfig.PollInterval);

                if (returnedToProjectSelection)
                {
                    TestContext.Progress.WriteLine("‚úÖ RevitHomePage: ƒê√£ chuy·ªÉn v·ªÅ trang project selection th√†nh c√¥ng");
                    return true;
                }
                else
                {
                    TestContext.Progress.WriteLine("‚ö†Ô∏è RevitHomePage: Ctrl+D ƒë√£ th·ª±c thi nh∆∞ng ch∆∞a v·ªÅ trang project selection");
                    return false;
                }
            }
            
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi s·ª≠ d·ª•ng Ctrl+D: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// L·∫•y danh s√°ch t·∫•t c·∫£ projects c√≥ s·∫µn
    /// </summary>
    public List<string> GetAvailableProjects()
    {
        var availableProjects = new List<string>();
        
        try
        {
            TestContext.Progress.WriteLine("üîç RevitHomePage: Qu√©t t·∫•t c·∫£ projects c√≥ s·∫µn...");
            
            var allElements = _mainWindow.FindAllDescendants();
            
            foreach (var element in allElements)
            {
                try
                {
                    if (element.IsAvailable)
                    {
                        var name = element.Name ?? "";
                        var controlType = element.ControlType;
                        
                        // S·ª≠ d·ª•ng logic m·ªõi ƒë·ªÉ ki·ªÉm tra project card
                        if (IsValidProjectCard(name, controlType))
                        {
                            availableProjects.Add(name);
                            TestContext.Progress.WriteLine($"üîç RevitHomePage: T√¨m th·∫•y project: '{name}' (Type: {controlType})");
                        }
                    }
                }
                catch (Exception ex)
                {
                    TestContext.Progress.WriteLine($"‚ö†Ô∏è RevitHomePage: L·ªói khi x·ª≠ l√Ω element: {ex.Message}");
                }
            }
            
            TestContext.Progress.WriteLine($"üìä RevitHomePage: T·ªïng c·ªông t√¨m th·∫•y {availableProjects.Count} projects");
            
            // Lo·∫°i b·ªè duplicates
            var uniqueProjects = availableProjects.Distinct().ToList();
            if (uniqueProjects.Count != availableProjects.Count)
            {
                TestContext.Progress.WriteLine($"üìä RevitHomePage: Sau khi lo·∫°i b·ªè duplicates: {uniqueProjects.Count} projects");
            }
            
            return uniqueProjects;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå RevitHomePage: L·ªói khi qu√©t projects: {ex.Message}");
            return new List<string>();
        }
    }

    /// <summary>
    /// Ki·ªÉm tra xem c√≥ ƒëang ·ªü trang project selection kh√¥ng
    /// </summary>
    private bool IsProjectSelectionVisible()
    {
        try
        {
            // T√¨m text "Recent" ƒë·ªÉ x√°c nh·∫≠n ƒëang ·ªü home page
            var recentText = _mainWindow.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Text).And(cf.ByName("Recent")));
            
            if (recentText != null && recentText.IsAvailable)
            {
                return true;
            }
            
            // Backup: t√¨m "Revit 2026" text
            var revitText = _mainWindow.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Text).And(cf.ByName("Revit 2026")));
                
            if (revitText != null && revitText.IsAvailable)
            {
                return true;
            }
            
            return false;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è L·ªói khi ki·ªÉm tra project selection: {ex.Message}");
            return false;
        }
    }
}
