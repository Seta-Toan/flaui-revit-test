using System;
using System.Linq;
using FlaUI.Core;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using FlaUI.UIA3;
using Revit.Automation.Config;
using Revit.Automation.Waits;
using NUnit.Framework;

namespace Revit.Automation.Dialogs;

public class SecurityDialog
{
    private readonly Application _app;
    private readonly UIA3Automation _uia;

    public SecurityDialog(Application app, UIA3Automation uia)
    {
        _app = app ?? throw new ArgumentNullException(nameof(app));
        _uia = uia ?? throw new ArgumentNullException(nameof(uia));
    }

    public DialogResult HandleIfPresent()
    {
        try
        {
            TestContext.Progress.WriteLine("üîç SecurityDialog: T√¨m security dialog...");
            var startTime = DateTime.Now;
            
            var securityDialog = FindSecurityDialog();
            
            if (securityDialog == null)
            {
                TestContext.Progress.WriteLine("‚úÖ SecurityDialog: Kh√¥ng t√¨m th·∫•y security dialog");
                return DialogResult.NotFound;
            }

            TestContext.Progress.WriteLine($"‚úÖ SecurityDialog: T√¨m th·∫•y security dialog: '{securityDialog.Name}'");
            
            var result = HandleSecurityDialog(securityDialog);
            
            if (result == DialogResult.Closed)
            {
                var closed = UiWaits.Until(() => !securityDialog.IsAvailable, TestConfig.DialogTimeout, TestConfig.PollInterval);
                if (!closed)
                {
                    TestContext.Progress.WriteLine("‚ö†Ô∏è SecurityDialog: Security dialog kh√¥ng ƒë√≥ng sau khi x·ª≠ l√Ω, nh∆∞ng ti·∫øp t·ª•c...");
                }
                else
                {
                    TestContext.Progress.WriteLine("‚úÖ SecurityDialog: Security dialog ƒë√£ ƒë√≥ng th√†nh c√¥ng");
                }
            }

            var totalTime = DateTime.Now - startTime;
            TestContext.Progress.WriteLine($"‚è±Ô∏è SecurityDialog: Th·ªùi gian x·ª≠ l√Ω security dialog: {totalTime.TotalSeconds:F1}s");
            
            return result;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω security dialog: {ex.Message}");
            return DialogResult.Failed;
        }
    }

    private AutomationElement? FindSecurityDialog()
    {
        var desktop = _uia.GetDesktop();
        
        // T√¨m theo t√™n ch√≠nh x√°c
        try
        {
            TestContext.Progress.WriteLine("üîç T√¨m theo t√™n 'Security - Unsigned Add-In'...");
            var dialog = desktop.FindFirstDescendant(cf => 
                cf.ByControlType(ControlType.Window).And(cf.ByName("Security - Unsigned Add-In")));
            if (dialog != null) 
            {
                TestContext.Progress.WriteLine("‚úÖ T√¨m th·∫•y security dialog theo t√™n");
                return dialog;
            }
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è L·ªói khi t√¨m theo t√™n: {ex.Message}");
        }

        TestContext.Progress.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y security dialog");
        return null;
    }

    private DialogResult HandleSecurityDialog(AutomationElement dialog)
    {
        try
        {
            var doNotLoadButton = FindDoNotLoadButton(dialog);
            
            if (doNotLoadButton != null)
            {
                TestContext.Progress.WriteLine($"üñ±Ô∏è === TH·ª∞C HI·ªÜN CLICK DO NOT LOAD BUTTON ===");
                TestContext.Progress.WriteLine($"üñ±Ô∏è Click button: '{doNotLoadButton.Name}' (AutoId: '{doNotLoadButton.AutomationId}')");
                doNotLoadButton.Invoke();
                TestContext.Progress.WriteLine($"‚úÖ Click DO NOT LOAD ho√†n t·∫•t - AN TO√ÄN!");
                return DialogResult.Closed;
            }
            return DialogResult.Closed;
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå L·ªói khi x·ª≠ l√Ω security dialog: {ex.Message}");
            return DialogResult.Failed;
        }
    }

    private Button? FindDoNotLoadButton(AutomationElement dialog)
    {
        //Scan t·∫•t c·∫£ buttons v√† t√¨m "Do Not Load" 
        try
        {
            TestContext.Progress.WriteLine("üîç Scan t·∫•t c·∫£ buttons ƒë·ªÉ t√¨m 'Do Not Load'...");
            var allButtons = dialog.FindAllDescendants(cf => cf.ByControlType(ControlType.Button));
            foreach (var btn in allButtons)
            {
                try
                {
                    var name = btn.Name ?? "";
                    var autoId = btn.AutomationId ?? "";
                    TestContext.Progress.WriteLine($"  Button: Name='{name}', AutoId='{autoId}'");
                    
                    if (name == "Do Not Load" || name.Contains("Do Not") || name.Contains("Don't Load") || name.Contains("Reject"))
                    {
                        TestContext.Progress.WriteLine($"‚úÖ T√¨m th·∫•y DO NOT LOAD button!");
                        return btn.AsButton();
                    }
                }
                catch { }
            }
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ö†Ô∏è L·ªói khi scan buttons: {ex.Message}");
        }

        TestContext.Progress.WriteLine("‚ùå Kh√¥ng t√¨m th·∫•y 'Do Not Load' button");
        return null;
    }
}
