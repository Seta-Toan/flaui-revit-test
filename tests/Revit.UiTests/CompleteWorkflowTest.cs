using NUnit.Framework;
using System;
using System.Linq;
using System.Threading.Tasks;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.Definitions;
using Revit.UiTests.Setup;
using Revit.UiPages.Pages;
using Revit.Automation.Services;
using Revit.Automation.Utils;

namespace Revit.UiTests;

[TestFixture]
[Category("CompleteWorkflow")]
public class CompleteWorkflowTest
{
    private JiraXrayService? _xrayService;
    private string? _testExecutionKey;
    private string? _cachedToken;
    private const string TEST_SUITE_NAME = "CompleteWorkflow";

    [OneTimeSetUp]
    public async Task Setup()
    {
        var clientId = ConfigurationHelper.GetJiraClientId();
        var clientSecret = ConfigurationHelper.GetJiraClientSecret();
        _testExecutionKey = TestMappingHelper.GetTestExecutionKey(TEST_SUITE_NAME);
        
        _xrayService = new JiraXrayService(clientId, clientSecret);
        
        // X√°c th·ª±c 1 l·∫ßn duy nh·∫•t khi b·∫Øt ƒë·∫ßu test suite
        _cachedToken = await _xrayService.GetTokenAsync();
        TestContext.Progress.WriteLine("üîê ƒê√£ x√°c th·ª±c Xray v√† cache token cho to√†n b·ªô test suite");
    }

    [OneTimeTearDown]
    public void Cleanup()
    {
        _xrayService?.Dispose();
    }

    [Test, Order(1)]
    [Timeout(120000)]
    [Retry(1)]
    public async Task E2E_Revit_Startup_To_Project_Selection()
    {
        var startTime = DateTime.Now;
        TestContext.Progress.WriteLine("üöÄ B·∫Øt ƒë·∫ßu E2E: Kh·ªüi ƒë·ªông Revit v√† t·ªõi trang ch·ªçn project...");

        try
        {
            var revit = GlobalSetup.Revit;
            Assert.That(revit.IsMainWindowReady(), Is.True, "Revit main window ch∆∞a s·∫µn s√†ng");
            var mainWindow = revit.MainWindow;
            Assert.That(mainWindow, Is.Not.Null, "Kh√¥ng t√¨m th·∫•y main window");

            var homePage = new RevitHomePage(mainWindow, revit.Uia!);
            
            var onProjectSelection = homePage.IsLoaded();
            Assert.That(onProjectSelection, Is.True, "Home page ch∆∞a load xong");

            var duration = DateTime.Now - startTime;
            TestContext.Progress.WriteLine($"‚úÖ E2E ho√†n t·∫•t trong {duration.TotalSeconds:F1}s");

            // S·ª≠ d·ª•ng token ƒë√£ cache
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Revit_Startup_To_Project_Selection));
            await PushTestResultToJira(testKey, "PASSED");
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå Test th·∫•t b·∫°i: {ex.Message}");
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Revit_Startup_To_Project_Selection));
            await PushTestResultToJira(testKey, "FAILED");
            throw;
        }
    }

    [Test, Order(2)]
    [Timeout(70000)] 
    [Retry(1)]
    public async Task E2E_Click_New_Project()
    {
        var startTime = DateTime.Now;
        TestContext.Progress.WriteLine("üöÄ B·∫Øt ƒë·∫ßu E2E: Click New Project...");

        try
        {
            var revit = GlobalSetup.Revit;
            Assert.That(revit.IsMainWindowReady(), Is.True, "Revit main window ch∆∞a s·∫µn s√†ng");
            var mainWindow = revit.MainWindow;
            Assert.That(mainWindow, Is.Not.Null, "Kh√¥ng t√¨m th·∫•y main window");

            var homePage = new RevitHomePage(mainWindow, revit.Uia!);
            Assert.That(homePage.IsLoaded(), Is.True, "Home page ch∆∞a load xong");
            
            var newProjectClicked = homePage.ClickNewProject();
            Assert.That(newProjectClicked, Is.True, "Kh√¥ng th·ªÉ click New Project button");

            TestContext.Progress.WriteLine($"‚úÖ E2E New Project ho√†n t·∫•t trong {(DateTime.Now - startTime).TotalSeconds:F1}s");
                
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Click_New_Project));
            await PushTestResultToJira(testKey, "PASSED");
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå Test th·∫•t b·∫°i: {ex.Message}");
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Click_New_Project));
            await PushTestResultToJira(testKey, "FAILED");
            throw;
        }
    }

    [Test, Order(3)]
    [Timeout(120000)]
    [Retry(1)]
    public async Task E2E_Create_New_Project_And_Save_To_TestData()
    {
        var startTime = DateTime.Now;
        TestContext.Progress.WriteLine("üöÄ B·∫Øt ƒë·∫ßu E2E: T·∫°o project m·ªõi v√† l∆∞u v√†o test data...");

        try
        {
            var revit = GlobalSetup.Revit;
            Assert.That(revit.IsMainWindowReady(), Is.True, "Revit main window ch∆∞a s·∫µn s√†ng");
            var mainWindow = revit.MainWindow;
            Assert.That(mainWindow, Is.Not.Null, "Kh√¥ng t√¨m th·∫•y main window");

            var homePage = new RevitHomePage(mainWindow, revit.Uia!);
            Assert.That(homePage.IsLoaded(), Is.True, "Home page ch∆∞a load xong");
            
            var projectCreated = homePage.CreateNewProject("TestProject_Automated");
            Assert.That(projectCreated, Is.True, "Kh√¥ng th·ªÉ t·∫°o project m·ªõi");

            TestContext.Progress.WriteLine("‚úÖ E2E Create New Project ho√†n t·∫•t - Save As dialog ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã");
            TestContext.Progress.WriteLine($"‚úÖ E2E Create New Project ho√†n t·∫•t trong {(DateTime.Now - startTime).TotalSeconds:F1}s");
            
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Create_New_Project_And_Save_To_TestData));
            await PushTestResultToJira(testKey, "PASSED");
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå Test th·∫•t b·∫°i: {ex.Message}");
            var testKey = TestMappingHelper.GetTestKey(TEST_SUITE_NAME, nameof(E2E_Create_New_Project_And_Save_To_TestData));
            await PushTestResultToJira(testKey, "FAILED");
            throw;
        }
    }

    private async Task PushTestResultToJira(string testKey, string status)
    {
        try
        {
            TestContext.Progress.WriteLine($" ƒê·∫©y k·∫øt qu·∫£ test {testKey} v·ªõi status {status} l√™n Jira...");
            
            // S·ª≠ d·ª•ng token ƒë√£ cache, kh√¥ng c·∫ßn g·ªçi GetTokenAsync() n·ªØa
            bool success = await _xrayService!.PushResultAsync(_testExecutionKey!, testKey, status, _cachedToken!);
            
            if (success)
            {
                TestContext.Progress.WriteLine($"‚úÖ ƒê√£ ƒë·∫©y k·∫øt qu·∫£ test {testKey} l√™n Jira th√†nh c√¥ng");
            }
            else
            {
                TestContext.Progress.WriteLine($"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫©y k·∫øt qu·∫£ test {testKey} l√™n Jira");
            }
        }
        catch (Exception ex)
        {
            TestContext.Progress.WriteLine($"‚ùå L·ªói khi ƒë·∫©y k·∫øt qu·∫£ test l√™n Jira: {ex.Message}");
        }
    }
}
